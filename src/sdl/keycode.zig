const c = @cImport({
    @cInclude("SDL.h");
});

pub const Keycode = enum(i32) {
    kc_0 = c.SDLK_0,
    kc_1 = c.SDLK_1,
    kc_2 = c.SDLK_2,
    kc_3 = c.SDLK_3,
    kc_4 = c.SDLK_4,
    kc_5 = c.SDLK_5,
    kc_6 = c.SDLK_6,
    kc_7 = c.SDLK_7,
    kc_8 = c.SDLK_8,
    kc_9 = c.SDLK_9,
    kc_a = c.SDLK_a,
    kc_ac_back = c.SDLK_AC_BACK,
    kc_ac_bookmarks = c.SDLK_AC_BOOKMARKS,
    kc_ac_forward = c.SDLK_AC_FORWARD,
    kc_ac_home = c.SDLK_AC_HOME,
    kc_ac_refresh = c.SDLK_AC_REFRESH,
    kc_ac_search = c.SDLK_AC_SEARCH,
    kc_ac_stop = c.SDLK_AC_STOP,
    kc_again = c.SDLK_AGAIN,
    kc_alt_erase = c.SDLK_ALTERASE,
    kc_apostrophe = c.SDLK_QUOTE,
    kc_application = c.SDLK_APPLICATION,
    kc_audio_mute = c.SDLK_AUDIOMUTE,
    kc_audio_next = c.SDLK_AUDIONEXT,
    kc_audio_play = c.SDLK_AUDIOPLAY,
    kc_audio_prev = c.SDLK_AUDIOPREV,
    kc_audio_stop = c.SDLK_AUDIOSTOP,
    kc_b = c.SDLK_b,
    kc_backslash = c.SDLK_BACKSLASH,
    kc_backspace = c.SDLK_BACKSPACE,
    kc_brightness_down = c.SDLK_BRIGHTNESSDOWN,
    kc_brightness_up = c.SDLK_BRIGHTNESSUP,
    kc_c = c.SDLK_c,
    kc_calculator = c.SDLK_CALCULATOR,
    kc_cancel = c.SDLK_CANCEL,
    kc_capslock = c.SDLK_CAPSLOCK,
    kc_clear = c.SDLK_CLEAR,
    kc_clear_again = c.SDLK_CLEARAGAIN,
    kc_comma = c.SDLK_COMMA,
    kc_computer = c.SDLK_COMPUTER,
    kc_copy = c.SDLK_COPY,
    kc_crsel = c.SDLK_CRSEL,
    kc_currency_subunit = c.SDLK_CURRENCYSUBUNIT,
    kc_currency_unit = c.SDLK_CURRENCYUNIT,
    kc_cut = c.SDLK_CUT,
    kc_d = c.SDLK_d,
    kc_decimal_separator = c.SDLK_DECIMALSEPARATOR,
    kc_delete = c.SDLK_DELETE,
    kc_display_switch = c.SDLK_DISPLAYSWITCH,
    kc_down = c.SDLK_DOWN,
    kc_e = c.SDLK_e,
    kc_eject = c.SDLK_EJECT,
    kc_end = c.SDLK_END,
    kc_equals = c.SDLK_EQUALS,
    kc_escape = c.SDLK_ESCAPE,
    kc_execute = c.SDLK_EXECUTE,
    kc_exsel = c.SDLK_EXSEL,
    kc_f = c.SDLK_f,
    kc_f1 = c.SDLK_F1,
    kc_f2 = c.SDLK_F2,
    kc_f3 = c.SDLK_F3,
    kc_f4 = c.SDLK_F4,
    kc_f5 = c.SDLK_F5,
    kc_f6 = c.SDLK_F6,
    kc_f7 = c.SDLK_F7,
    kc_f8 = c.SDLK_F8,
    kc_f9 = c.SDLK_F9,
    kc_f10 = c.SDLK_F10,
    kc_f11 = c.SDLK_F11,
    kc_f12 = c.SDLK_F12,
    kc_f13 = c.SDLK_F13,
    kc_f14 = c.SDLK_F14,
    kc_f15 = c.SDLK_F15,
    kc_f16 = c.SDLK_F16,
    kc_f17 = c.SDLK_F17,
    kc_f18 = c.SDLK_F18,
    kc_f19 = c.SDLK_F19,
    kc_f20 = c.SDLK_F20,
    kc_f21 = c.SDLK_F21,
    kc_f22 = c.SDLK_F22,
    kc_f23 = c.SDLK_F23,
    kc_f24 = c.SDLK_F24,
    kc_find = c.SDLK_FIND,
    kc_g = c.SDLK_g,
    kc_grave = c.SDLK_BACKQUOTE,
    kc_h = c.SDLK_h,
    kc_help = c.SDLK_HELP,
    kc_home = c.SDLK_HOME,
    kc_i = c.SDLK_i,
    kc_insert = c.SDLK_INSERT,
    kc_j = c.SDLK_j,
    kc_k = c.SDLK_k,
    kc_keyboard_illum_down = c.SDLK_KBDILLUMDOWN,
    kc_keyboard_illum_toggle = c.SDLK_KBDILLUMTOGGLE,
    kc_keyboard_illum_up = c.SDLK_KBDILLUMUP,
    kc_kp_0 = c.SDLK_KP_0,
    kc_kp_1 = c.SDLK_KP_1,
    kc_kp_2 = c.SDLK_KP_2,
    kc_kp_3 = c.SDLK_KP_3,
    kc_kp_4 = c.SDLK_KP_4,
    kc_kp_5 = c.SDLK_KP_5,
    kc_kp_6 = c.SDLK_KP_6,
    kc_kp_7 = c.SDLK_KP_7,
    kc_kp_8 = c.SDLK_KP_8,
    kc_kp_9 = c.SDLK_KP_9,
    kc_kp_a = c.SDLK_KP_A,
    kc_kp_ampersand = c.SDLK_AMPERSAND,
    kc_kp_at = c.SDLK_KP_AT,
    kc_kp_b = c.SDLK_KP_B,
    kc_kp_backspace = c.SDLK_KP_BACKSPACE,
    kc_kp_binary = c.SDLK_KP_BINARY,
    kc_kp_c = c.SDLK_KP_C,
    kc_kp_clear = c.SDLK_KP_CLEAR,
    kc_kp_clear_entry = c.SDLK_KP_CLEARENTRY,
    kc_kp_colon = c.SDLK_KP_COLON,
    kc_kp_comma = c.SDLK_KP_COMMA,
    kc_kp_d = c.SDLK_KP_D,
    kc_kp_double_ampersand = c.SDLK_KP_DBLAMPERSAND,
    kc_kp_decimal = c.SDLK_KP_DECIMAL,
    kc_kp_divide = c.SDLK_KP_DIVIDE,
    kc_kp_e = c.SDLK_KP_E,
    kc_kp_enter = c.SDLK_KP_ENTER,
    kc_kp_equals = c.SDLK_KP_EQUALS,
    kc_kp_equals_as_400 = c.SDLK_KP_EQUALSAS400,
    kc_kp_exclam = c.SDLK_KP_EXCLAM,
    kc_kp_f = c.SDLK_KP_F,
    kc_kp_greater = c.SDLK_KP_GREATER,
    kc_kp_hash = c.SDLK_KP_HASH,
    kc_kp_hexadecimal = c.SDLK_KP_HEXADECIMAL,
    kc_kp_left_brace = c.SDLK_KP_LEFTBRACE,
    kc_kp_left_paren = c.SDLK_KP_LEFTPAREN,
    kc_kp_less = c.SDLK_KP_LESS,
    kc_kp_mem_add = c.SDLK_KP_MEMADD,
    kc_kp_mem_clear = c.SDLK_KP_MEMCLEAR,
    kc_kp_mem_divide = c.SDLK_KP_MEMDIVIDE,
    kc_kp_mem_multiply = c.SDLK_KP_MEMMULTIPLY,
    kc_kp_mem_recall = c.SDLK_KP_MEMRECALL,
    kc_kp_mem_store = c.SDLK_KP_MEMSTORE,
    kc_kp_mem_subtract = c.SDLK_KP_MEMSUBTRACT,
    kc_kp_minus = c.SDLK_KP_MINUS,
    kc_kp_multiply = c.SDLK_KP_MULTIPLY,
    kc_kp_octal = c.SDLK_KP_OCTAL,
    kc_kp_percent = c.SDLK_KP_PERCENT,
    kc_kp_period = c.SDLK_KP_PERIOD,
    kc_kp_plus = c.SDLK_KP_PLUS,
    kc_kp_plus_minus = c.SDLK_KP_PLUSMINUS,
    kc_kp_power = c.SDLK_KP_POWER,
    kc_kp_right_brace = c.SDLK_KP_RIGHTBRACE,
    kc_kp_right_paren = c.SDLK_KP_RIGHTPAREN,
    kc_kp_space = c.SDLK_KP_SPACE,
    kc_kp_tab = c.SDLK_KP_TAB,
    kc_kp_pipe = c.SDLK_KP_VERTICALBAR,
    kc_kp_xor = c.SDLK_KP_XOR,
    kc_l = c.SDLK_l,
    kc_left_alt = c.SDLK_LALT,
    kc_left_ctrl = c.SDLK_LCTRL,
    kc_left = c.SDLK_LEFT,
    kc_left_bracket = c.SDLK_LEFTBRACKET,
    kc_left_gui = c.SDLK_LGUI,
    kc_left_shift = c.SDLK_LSHIFT,
    kc_m = c.SDLK_m,
    kc_mail = c.SDLK_MAIL,
    kc_media_select = c.SDLK_MEDIASELECT,
    kc_menu = c.SDLK_MENU,
    kc_minus = c.SDLK_MINUS,
    kc_mode_switch = c.SDLK_MODE,
    kc_mute = c.SDLK_MUTE,
    kc_n = c.SDLK_n,
    kc_numlock = c.SDLK_NUMLOCKCLEAR,
    kc_o = c.SDLK_o,
    kc_oper = c.SDLK_OPER,
    kc_out = c.SDLK_OUT,
    kc_p = c.SDLK_p,
    kc_page_down = c.SDLK_PAGEDOWN,
    kc_page_up = c.SDLK_PAGEUP,
    kc_paste = c.SDLK_PASTE,
    kc_pause = c.SDLK_PAUSE,
    kc_period = c.SDLK_PERIOD,
    kc_power = c.SDLK_POWER,
    kc_print_screen = c.SDLK_PRINTSCREEN,
    kc_prior = c.SDLK_PRIOR,
    kc_q = c.SDLK_q,
    kc_r = c.SDLK_r,
    kc_right_alt = c.SDLK_RALT,
    kc_right_ctrl = c.SDLK_RCTRL,
    kc_return = c.SDLK_RETURN,
    kc_return2 = c.SDLK_RETURN2,
    kc_right_gui = c.SDLK_RGUI,
    kc_right = c.SDLK_RIGHT,
    kc_right_bracket = c.SDLK_RIGHTBRACKET,
    kc_right_shift = c.SDLK_RSHIFT,
    kc_s = c.SDLK_s,
    kc_scroll_lock = c.SDLK_SCROLLLOCK,
    kc_semicolon = c.SDLK_SEMICOLON,
    kc_separator = c.SDLK_SEPARATOR,
    kc_slash = c.SDLK_SLASH,
    kc_sleep = c.SDLK_SLEEP,
    kc_space = c.SDLK_SPACE,
    kc_stop = c.SDLK_STOP,
    kc_sys_req = c.SDLK_SYSREQ,
    kc_t = c.SDLK_t,
    kc_tab = c.SDLK_TAB,
    kc_thousand_separator = c.SDLK_THOUSANDSSEPARATOR,
    kc_u = c.SDLK_u,
    kc_undo = c.SDLK_UNDO,
    kc_unknown = c.SDLK_UNKNOWN,
    kc_up = c.SDLK_UP,
    kc_v = c.SDLK_v,
    kc_volume_down = c.SDLK_VOLUMEDOWN,
    kc_volume_up = c.SDLK_VOLUMEUP,
    kc_w = c.SDLK_w,
    kc_www = c.SDLK_WWW,
    kc_x = c.SDLK_x,
    kc_y = c.SDLK_y,
    kc_z = c.SDLK_z,
};
